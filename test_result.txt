============================= test session starts ==============================
platform darwin -- Python 3.12.6, pytest-8.3.2, pluggy-1.5.0
rootdir: /Users/andrewharris/Dropbox/ChefGPT
plugins: cov-5.0.0, flask-1.3.0, anyio-4.4.0, mock-3.14.0
collected 10 items

backend/tests/test_auth_routes.py ...                                    [ 30%]
backend/tests/test_inventory.py FFFFFFF                                  [100%]

=================================== FAILURES ===================================
______________________________ test_get_inventory ______________________________

client = <FlaskClient <Flask 'backend'>>, logged_in_user = <User testuser>

    def test_get_inventory(client, logged_in_user):
        # Test case for getting inventory
        response = client.get('/inventory')
        assert response.status_code == 200
>       assert isinstance(response.json, list)  # Response should be a list
E       assert False
E        +  where False = isinstance(None, list)
E        +    where None = <WrapperTestResponse streamed [200 OK]>.json

backend/tests/test_inventory.py:29: AssertionError
______________________________ test_add_inventory ______________________________

client = <FlaskClient <Flask 'backend'>>, logged_in_user = <User testuser>

    def test_add_inventory(client, logged_in_user):
        # Test case for adding inventory
        data = {
            'ingredient': 'Tomato',
            'quantity': 3,
            'unit': 'kg'
        }
        response = client.post('/inventory', json=data)
>       assert response.status_code == 201
E       assert 405 == 201
E        +  where 405 = <WrapperTestResponse streamed [405 METHOD NOT ALLOWED]>.status_code

backend/tests/test_inventory.py:39: AssertionError
______________________ test_add_inventory_missing_fields _______________________

client = <FlaskClient <Flask 'backend'>>, logged_in_user = <User testuser>

    def test_add_inventory_missing_fields(client, logged_in_user):
        # Test case for missing fields in the POST request
        data = {
            'ingredient': 'Tomato'
            # Missing 'quantity' and 'unit'
        }
        response = client.post('/inventory', json=data)
>       assert response.status_code == 400  # Expecting bad request due to missing fields
E       assert 405 == 400
E        +  where 405 = <WrapperTestResponse streamed [405 METHOD NOT ALLOWED]>.status_code

backend/tests/test_inventory.py:50: AssertionError
____________________________ test_update_inventory _____________________________

client = <FlaskClient <Flask 'backend'>>, logged_in_user = <User testuser>

    def test_update_inventory(client, logged_in_user):
        # First, add an inventory item to update
>       new_item = Inventory(user_id=logged_in_user.id, ingredient='Apple', quantity=5, unit='kg')

backend/tests/test_inventory.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
<string>:4: in __init__
    ???
venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:571: in _initialize_instance
    with util.safe_reraise():
venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:569: in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Inventory Apple>
kwargs = {'ingredient': 'Apple', 'quantity': 5, 'unit': 'kg', 'user_id': 1}
cls_ = <class 'backend.models.Inventory'>, k = 'unit'

    def _declarative_constructor(self: Any, **kwargs: Any) -> None:
        """A simple constructor that allows initialization from kwargs.
    
        Sets attributes on the constructed instance using the names and
        values in ``kwargs``.
    
        Only keys that are present as
        attributes of the instance's class are allowed. These could be,
        for example, any mapped columns or relationships.
        """
        cls_ = type(self)
        for k in kwargs:
            if not hasattr(cls_, k):
>               raise TypeError(
                    "%r is an invalid keyword argument for %s" % (k, cls_.__name__)
                )
E               TypeError: 'unit' is an invalid keyword argument for Inventory

venv/lib/python3.12/site-packages/sqlalchemy/orm/decl_base.py:2167: TypeError
_______________________ test_update_inventory_not_found ________________________

client = <FlaskClient <Flask 'backend'>>, logged_in_user = <User testuser>

    def test_update_inventory_not_found(client, logged_in_user):
        # Test case for updating a non-existent inventory item
        update_data = {
            'quantity': 10,
            'unit': 'lbs'
        }
        response = client.put('/inventory/99999', json=update_data)  # Use an invalid ID
>       assert response.status_code == 404
E       assert 405 == 404
E        +  where 405 = <WrapperTestResponse streamed [405 METHOD NOT ALLOWED]>.status_code

backend/tests/test_inventory.py:76: AssertionError
____________________________ test_delete_inventory _____________________________

client = <FlaskClient <Flask 'backend'>>, logged_in_user = <User testuser>

    def test_delete_inventory(client, logged_in_user):
        # First, add an inventory item to delete
>       new_item = Inventory(user_id=logged_in_user.id, ingredient='Banana', quantity=2, unit='kg')

backend/tests/test_inventory.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
<string>:4: in __init__
    ???
venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:571: in _initialize_instance
    with util.safe_reraise():
venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:569: in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Inventory Banana>
kwargs = {'ingredient': 'Banana', 'quantity': 2, 'unit': 'kg', 'user_id': 1}
cls_ = <class 'backend.models.Inventory'>, k = 'unit'

    def _declarative_constructor(self: Any, **kwargs: Any) -> None:
        """A simple constructor that allows initialization from kwargs.
    
        Sets attributes on the constructed instance using the names and
        values in ``kwargs``.
    
        Only keys that are present as
        attributes of the instance's class are allowed. These could be,
        for example, any mapped columns or relationships.
        """
        cls_ = type(self)
        for k in kwargs:
            if not hasattr(cls_, k):
>               raise TypeError(
                    "%r is an invalid keyword argument for %s" % (k, cls_.__name__)
                )
E               TypeError: 'unit' is an invalid keyword argument for Inventory

venv/lib/python3.12/site-packages/sqlalchemy/orm/decl_base.py:2167: TypeError
_______________________ test_delete_inventory_not_found ________________________

client = <FlaskClient <Flask 'backend'>>, logged_in_user = <User testuser>

    def test_delete_inventory_not_found(client, logged_in_user):
        # Test case for deleting a non-existent inventory item
        response = client.delete('/inventory/99999')  # Use an invalid ID
>       assert response.status_code == 404
E       assert 405 == 404
E        +  where 405 = <WrapperTestResponse streamed [405 METHOD NOT ALLOWED]>.status_code

backend/tests/test_inventory.py:94: AssertionError
=========================== short test summary info ============================
FAILED backend/tests/test_inventory.py::test_get_inventory - assert False
FAILED backend/tests/test_inventory.py::test_add_inventory - assert 405 == 201
FAILED backend/tests/test_inventory.py::test_add_inventory_missing_fields - a...
FAILED backend/tests/test_inventory.py::test_update_inventory - TypeError: 'u...
FAILED backend/tests/test_inventory.py::test_update_inventory_not_found - ass...
FAILED backend/tests/test_inventory.py::test_delete_inventory - TypeError: 'u...
FAILED backend/tests/test_inventory.py::test_delete_inventory_not_found - ass...
========================= 7 failed, 3 passed in 6.59s ==========================
